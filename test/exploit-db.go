package main

import (
	"flag"
	"fmt"
	"io"
	"net/http"
	"os"
	"os/exec"
)

var database string = "http://www.exploit-db.com/archive.tar.bz2"

func check(err error, msg string) {
	if err != nil {
		fmt.Println(msg)
		os.Exit(1)
	}
}

func downloadDB() {
	out, err := os.Create("archive.tar.bz2")
	check(err, "Cant create download file")
	defer out.Close()

	resp, err := http.Get(database)
	check(err, "Cant download database")
	defer resp.Body.Close()

	n, err := io.Copy(out, resp.Body)
	check(err, "Cant write database")

	fmt.Printf("%d bytes database downloaded\n", n)
}

func unpackDB() {
	fmt.Println("unpacking db ...")
	cmd := exec.Command("/bin/tar", "jxvf", "archive.tar.bz2")
	_, err := cmd.Output()
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	fmt.Println("db ready!")
}

func existsFile(file string) bool {
	if _, err := os.Stat(file); os.IsNotExist(err) {
		return false
	}
	return true
}

func existsDB() bool {
	if existsFile("files.csv") && existsFile("platform") {
		return true
	}
	return false
}

func askUpgrade() bool {
	var c byte
	fmt.Printf("Upgrade exploit-db database? (y/n) ")
	fmt.Scanf("%c", &c)
	if c == 'y' || c == 'Y' {
		return true
	}
	return false
}

func indexDB() {

}

func main() {
	var url *string = flag.String("url", "", "the target url")

	/*
		if !existsDB() {
			fmt.Println("Database not installed, downloading ...")
			downloadDB()
			unpackDB()
			indexDB()
		} else if askUpgrade() {
			fmt.Println("Upgrading database ...")
			downloadDB()
			unpackDB()
			indexDB()
		}*/

	os.Open("exploit.db")

	fmt.Println("scanning %s", *url)
}
